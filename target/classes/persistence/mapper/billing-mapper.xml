<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bvha.billing.persistence.mapper.billing">

  <select id="BillingDetails" resultType="hashmap" parameterType="hashmap">
    select billing_details.id,
    	MEMBER as member,
      member.address,
    	ASSOC_FEE as assocFee,
    	PREV_READING as prevReading,
    	CURR_READING as currReading,
    	WATER_AMOUNT as waterAmount,
    	PREVIOUS_TOTAL as previousTotal,
    	OTHER_DESC as otherDescription,
    	OTHER_AMOUNT as otherAmount,
    	BILLING_PERIOD as period,
    	PREVIOUS_PAYMENT as previousPaymentTotal,
    	CURRENT_TOTAL as currentTotal,
    	GRAND_TOTAL as grandTotal,
    	PREVIOUS_BILLING_PERIOD as prevBillingId
    from
    	billing_details inner join member on billing_details.member = member.id
    where 
    	BILLING_PERIOD = #{periodId}
    	AND MEMBER = #{memberId}
  </select>

  <select id="BillingYear" resultType="java.lang.String" >
    select distinct period_year as periodYear 
    from billing_period 
    where status != 'S'
    order by period_year desc
  </select>

  <select id="BillingMonth" resultType="hashmap" parameterType="java.lang.String">
    select ID as id,
        PERIOD_MONTH as periodMonth,
        period_cutoff as periodCutOff,
        status
    from
        billing_period
    where
        PERIOD_YEAR = #{periodYear} 
        AND status != 'S'
    order by period_month desc
  </select>

  <select id="MemberBillList" resultType="hashmap" parameterType="long">
    select member.id as id,
    member.fname as fName,
    member.lname as lName,
    billing.grand_total - IFNULL(payment.total_payment,0) as remaining
from member inner join billing_details as billing on member.id = billing.member
    left outer join (select member, billing, sum(amount) as total_payment from payment group by member, billing ) as payment on payment.member = member.id and payment.BILLING = billing.id
where billing.billing_period = #{periodId}
  </select>

  <select id="GeneratePeriod" resultType="hashmap">
     select 
      YEAR(PERIOD_CUTOFF) as periodYear,
      MONTH(PERIOD_CUTOFF)-1 as periodMonth,
      PERIOD_CUTOFF as periodDate,
      LAST_DAY(DATE_ADD(PERIOD_CUTOFF, INTERVAL 1 MONTH)) as periodCutoff
     from billing_period where status = 'A';
   </select>

  <select id="GenerateBill" resultType="hashmap">
   select 
      member.id as id
      ,member.fName
      ,member.lName
      ,member.address
      ,member.with_bond as withBond
      ,member.MONTHLY_DUE as assocFee
      ,member.MONTHLY_DUE as currentTotal
      ,IFNULL(curr_reading,0) as prevReading
      ,IFNULL(curr_reading,0) as currReading
      ,IFNULL(grand_total,0) as previousTotal
      ,0 as waterAmount
      ,0 as otherAmount
      ,IFNULL(payment.amount,0) as previousPaymentTotal
      ,IFNULL(grand_total,0) - IFNULL(payment.amount,0) as remaining
      ,billing_details.id as prevBillingPeriod
      ,member.MONTHLY_DUE + (IFNULL(grand_total,0) - IFNULL(payment.amount,0)) as grandTotal
   from member
      left outer join (billing_details
      inner join (select id from billing_period order by PERIOD_YEAR desc, PERIOD_MONTH desc limit 1) period on period.id  = billing_details.billing_period)  on billing_details.member = member.id
      left outer join (select billing, sum(amount) as amount, count(id) as count from payment group by billing) as payment on billing_details.id = payment.BILLING
    where member.status = 'A';

  </select>

  <select id="CheckForExisting" resultType="hashmap">
    select main.* from  (select 1 from dual) tmp left join (select  
      id,
      PERIOD_YEAR as periodYear,
      PERIOD_MONTH as periodMonth,
      PERIOD_DATE as periodDate,
      PERIOD_CUTOFF as periodCutoff,
      status
    from billing_period where status=#{status}) main  on 1=1;;
  </select>

  <select id="getDraftBillingDetails" resultType="hashmap">
     select
      member.id,
      member.lname as lName,
      member.fname as fName,
      member.address as address,
      billing_details.ASSOC_FEE as assocFee,
      billing_details.id as billingId,
      billing_details.prev_reading as prevReading,
      billing_details.curr_reading as currReading,
      billing_details.water_amount as waterAmount,
      billing_details.with_bond as withBond,
      billing_details.other_desc as otherDescription,
      billing_details.other_amount as otherAmount,
      billing_details.previous_total as previousTotal,
      billing_details.previous_payment as previousPaymentTotal,
      billing_details.previous_total - billing_details.previous_payment as remaining,
      billing_details.current_total as currentTotal,
      billing_details.grand_total as grandTotal,
      billing_details.previous_billing_period as previousBillingPeriod,
      billing_details.billing_period as billing_period,
      billing_period.id as periodId
    from billing_details inner join member on member.id = billing_details.member inner join billing_period on billing_period.id = billing_details.billing_period
    where billing_details.billing_period =  #{id};
  </select>


  <insert id="newPeriod" useGeneratedKeys="true" keyProperty="id" parameterType="map">
    insert into billing_period ( period_year, period_month, period_date, period_cutoff, status) values (
      #{periodYear},
      #{periodMonth},
      #{periodDate},
      #{periodCutoff},
      #{status}
    )
  </insert>

  <insert id="updatePeriod">
    update billing_period set status = #{status} where id = #{id}
  </insert>

   <insert id="Submit" parameterType="map">
    insert into billing_details (
      billing_period
      ,member
      ,assoc_fee
      ,curr_reading
      ,prev_reading
      ,water_amount
      ,previous_total
      ,with_bond
      ,other_desc
      ,other_amount
      ,previous_payment
      ,current_total
      ,grand_total
      ,previous_billing_period)
      values
    <foreach collection="list" item="model" index="index" separator=",">
     (
      #{model.periodId}
      ,#{model.id}
      ,#{model.assocFee}
      ,#{model.currReading}
      ,#{model.prevReading}
      ,#{model.waterAmount}
      ,#{model.previousTotal}
      ,#{model.withBond}
      ,#{model.otherDescription}
      ,#{model.otherAmount}
      ,#{model.previousPaymentTotal}
      ,#{model.currentTotal}
      ,#{model.grandTotal}
      ,#{model.prevBillingPeriod}
    )
    </foreach>
  </insert>

  <update id="update">
    update billing_details set
      billing_period = #{periodId},
      curr_reading = #{currReading},
      prev_reading = #{prevReading},
      water_amount = #{waterAmount},
      other_desc = #{otherDescription},
      other_amount = #{otherAmount},
      current_total = #{currentTotal},
      grand_total = #{grandTotal}
    where id = #{billingId}
  </update>

  <update id="archivePeriod">
    update billing_period set
      status='D'
    where status='A';
  </update>

</mapper>